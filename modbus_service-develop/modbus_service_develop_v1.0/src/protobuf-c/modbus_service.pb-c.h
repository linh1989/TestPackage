/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: modbus_service.proto */

#ifndef PROTOBUF_C_modbus_5fservice_2eproto__INCLUDED
#define PROTOBUF_C_modbus_5fservice_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ModbusService__Version ModbusService__Version;
typedef struct _ModbusService__Event ModbusService__Event;
typedef struct _ModbusService__EmeterOutput ModbusService__EmeterOutput;
typedef struct _ModbusService__EmeterError ModbusService__EmeterError;
typedef struct _ModbusService__IsochaError ModbusService__IsochaError;
typedef struct _ModbusService__IsochaIsoStatus ModbusService__IsochaIsoStatus;
typedef struct _ModbusService__IsochaMeasureControl ModbusService__IsochaMeasureControl;
typedef struct _ModbusService__NodeCommLost ModbusService__NodeCommLost;


/* --- enums --- */


/* --- messages --- */

struct  _ModbusService__Version
{
  ProtobufCMessage base;
  uint32_t major;
  uint32_t minor;
  uint32_t subminor;
};
#define MODBUS_SERVICE__VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__version__descriptor) \
    , 0, 0, 0 }


struct  _ModbusService__Event
{
  ProtobufCMessage base;
  uint32_t event;
};
#define MODBUS_SERVICE__EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__event__descriptor) \
    , 0 }


struct  _ModbusService__EmeterOutput
{
  ProtobufCMessage base;
  uint32_t m_id;
  uint32_t voltage;
  uint32_t current;
  uint32_t power;
};
#define MODBUS_SERVICE__EMETER_OUTPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__emeter_output__descriptor) \
    , 0, 0, 0, 0 }


struct  _ModbusService__EmeterError
{
  ProtobufCMessage base;
  uint32_t error_code;
};
#define MODBUS_SERVICE__EMETER_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__emeter_error__descriptor) \
    , 0 }


struct  _ModbusService__IsochaError
{
  ProtobufCMessage base;
  uint32_t error_code;
};
#define MODBUS_SERVICE__ISOCHA_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__isocha_error__descriptor) \
    , 0 }


struct  _ModbusService__IsochaIsoStatus
{
  ProtobufCMessage base;
  uint32_t status;
};
#define MODBUS_SERVICE__ISOCHA_ISO_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__isocha_iso_status__descriptor) \
    , 0 }


struct  _ModbusService__IsochaMeasureControl
{
  ProtobufCMessage base;
  protobuf_c_boolean start;
};
#define MODBUS_SERVICE__ISOCHA_MEASURE_CONTROL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__isocha_measure_control__descriptor) \
    , 0 }


struct  _ModbusService__NodeCommLost
{
  ProtobufCMessage base;
  uint32_t node;
};
#define MODBUS_SERVICE__NODE_COMM_LOST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__node_comm_lost__descriptor) \
    , 0 }


/* ModbusService__Version methods */
void   modbus_service__version__init
                     (ModbusService__Version         *message);
size_t modbus_service__version__get_packed_size
                     (const ModbusService__Version   *message);
size_t modbus_service__version__pack
                     (const ModbusService__Version   *message,
                      uint8_t             *out);
size_t modbus_service__version__pack_to_buffer
                     (const ModbusService__Version   *message,
                      ProtobufCBuffer     *buffer);
ModbusService__Version *
       modbus_service__version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__version__free_unpacked
                     (ModbusService__Version *message,
                      ProtobufCAllocator *allocator);
/* ModbusService__Event methods */
void   modbus_service__event__init
                     (ModbusService__Event         *message);
size_t modbus_service__event__get_packed_size
                     (const ModbusService__Event   *message);
size_t modbus_service__event__pack
                     (const ModbusService__Event   *message,
                      uint8_t             *out);
size_t modbus_service__event__pack_to_buffer
                     (const ModbusService__Event   *message,
                      ProtobufCBuffer     *buffer);
ModbusService__Event *
       modbus_service__event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__event__free_unpacked
                     (ModbusService__Event *message,
                      ProtobufCAllocator *allocator);
/* ModbusService__EmeterOutput methods */
void   modbus_service__emeter_output__init
                     (ModbusService__EmeterOutput         *message);
size_t modbus_service__emeter_output__get_packed_size
                     (const ModbusService__EmeterOutput   *message);
size_t modbus_service__emeter_output__pack
                     (const ModbusService__EmeterOutput   *message,
                      uint8_t             *out);
size_t modbus_service__emeter_output__pack_to_buffer
                     (const ModbusService__EmeterOutput   *message,
                      ProtobufCBuffer     *buffer);
ModbusService__EmeterOutput *
       modbus_service__emeter_output__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__emeter_output__free_unpacked
                     (ModbusService__EmeterOutput *message,
                      ProtobufCAllocator *allocator);
/* ModbusService__EmeterError methods */
void   modbus_service__emeter_error__init
                     (ModbusService__EmeterError         *message);
size_t modbus_service__emeter_error__get_packed_size
                     (const ModbusService__EmeterError   *message);
size_t modbus_service__emeter_error__pack
                     (const ModbusService__EmeterError   *message,
                      uint8_t             *out);
size_t modbus_service__emeter_error__pack_to_buffer
                     (const ModbusService__EmeterError   *message,
                      ProtobufCBuffer     *buffer);
ModbusService__EmeterError *
       modbus_service__emeter_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__emeter_error__free_unpacked
                     (ModbusService__EmeterError *message,
                      ProtobufCAllocator *allocator);
/* ModbusService__IsochaError methods */
void   modbus_service__isocha_error__init
                     (ModbusService__IsochaError         *message);
size_t modbus_service__isocha_error__get_packed_size
                     (const ModbusService__IsochaError   *message);
size_t modbus_service__isocha_error__pack
                     (const ModbusService__IsochaError   *message,
                      uint8_t             *out);
size_t modbus_service__isocha_error__pack_to_buffer
                     (const ModbusService__IsochaError   *message,
                      ProtobufCBuffer     *buffer);
ModbusService__IsochaError *
       modbus_service__isocha_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__isocha_error__free_unpacked
                     (ModbusService__IsochaError *message,
                      ProtobufCAllocator *allocator);
/* ModbusService__IsochaIsoStatus methods */
void   modbus_service__isocha_iso_status__init
                     (ModbusService__IsochaIsoStatus         *message);
size_t modbus_service__isocha_iso_status__get_packed_size
                     (const ModbusService__IsochaIsoStatus   *message);
size_t modbus_service__isocha_iso_status__pack
                     (const ModbusService__IsochaIsoStatus   *message,
                      uint8_t             *out);
size_t modbus_service__isocha_iso_status__pack_to_buffer
                     (const ModbusService__IsochaIsoStatus   *message,
                      ProtobufCBuffer     *buffer);
ModbusService__IsochaIsoStatus *
       modbus_service__isocha_iso_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__isocha_iso_status__free_unpacked
                     (ModbusService__IsochaIsoStatus *message,
                      ProtobufCAllocator *allocator);
/* ModbusService__IsochaMeasureControl methods */
void   modbus_service__isocha_measure_control__init
                     (ModbusService__IsochaMeasureControl         *message);
size_t modbus_service__isocha_measure_control__get_packed_size
                     (const ModbusService__IsochaMeasureControl   *message);
size_t modbus_service__isocha_measure_control__pack
                     (const ModbusService__IsochaMeasureControl   *message,
                      uint8_t             *out);
size_t modbus_service__isocha_measure_control__pack_to_buffer
                     (const ModbusService__IsochaMeasureControl   *message,
                      ProtobufCBuffer     *buffer);
ModbusService__IsochaMeasureControl *
       modbus_service__isocha_measure_control__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__isocha_measure_control__free_unpacked
                     (ModbusService__IsochaMeasureControl *message,
                      ProtobufCAllocator *allocator);
/* ModbusService__NodeCommLost methods */
void   modbus_service__node_comm_lost__init
                     (ModbusService__NodeCommLost         *message);
size_t modbus_service__node_comm_lost__get_packed_size
                     (const ModbusService__NodeCommLost   *message);
size_t modbus_service__node_comm_lost__pack
                     (const ModbusService__NodeCommLost   *message,
                      uint8_t             *out);
size_t modbus_service__node_comm_lost__pack_to_buffer
                     (const ModbusService__NodeCommLost   *message,
                      ProtobufCBuffer     *buffer);
ModbusService__NodeCommLost *
       modbus_service__node_comm_lost__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__node_comm_lost__free_unpacked
                     (ModbusService__NodeCommLost *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ModbusService__Version_Closure)
                 (const ModbusService__Version *message,
                  void *closure_data);
typedef void (*ModbusService__Event_Closure)
                 (const ModbusService__Event *message,
                  void *closure_data);
typedef void (*ModbusService__EmeterOutput_Closure)
                 (const ModbusService__EmeterOutput *message,
                  void *closure_data);
typedef void (*ModbusService__EmeterError_Closure)
                 (const ModbusService__EmeterError *message,
                  void *closure_data);
typedef void (*ModbusService__IsochaError_Closure)
                 (const ModbusService__IsochaError *message,
                  void *closure_data);
typedef void (*ModbusService__IsochaIsoStatus_Closure)
                 (const ModbusService__IsochaIsoStatus *message,
                  void *closure_data);
typedef void (*ModbusService__IsochaMeasureControl_Closure)
                 (const ModbusService__IsochaMeasureControl *message,
                  void *closure_data);
typedef void (*ModbusService__NodeCommLost_Closure)
                 (const ModbusService__NodeCommLost *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor modbus_service__version__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__event__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__emeter_output__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__emeter_error__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__isocha_error__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__isocha_iso_status__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__isocha_measure_control__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__node_comm_lost__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_modbus_5fservice_2eproto__INCLUDED */
