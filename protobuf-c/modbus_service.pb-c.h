/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: modbus_service.proto */

#ifndef PROTOBUF_C_modbus_service_2eproto__INCLUDED
#define PROTOBUF_C_modbus_service_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _modbus_service__Version modbus_service__Version;
typedef struct _modbus_service__Event modbus_service__Event;
typedef struct _modbus_service__RectifierOutput modbus_service__RectifierOutput;
typedef struct _modbus_service__RectifierError modbus_service__RectifierError;
typedef struct _modbus_service__RectifierErrorDetail modbus_service__RectifierErrorDetail;
typedef struct _modbus_service__RectifierWarning modbus_service__RectifierWarning;
typedef struct _modbus_service__RectifierInfo modbus_service__RectifierInfo;
typedef struct _modbus_service__OutputVoltage modbus_service__OutputVoltage;
typedef struct _modbus_service__IsoStatus modbus_service__IsoStatus;
typedef struct _modbus_service__RelayStatus modbus_service__RelayStatus;
typedef struct _modbus_service__BusStatus modbus_service__BusStatus;
typedef struct _modbus_service__NodeCommLost modbus_service__NodeCommLost;


/* --- enums --- */

/* --- messages --- */

struct  _modbus_service__Version
{
  ProtobufCMessage base;
  uint32_t major;
  uint32_t minor;
  uint32_t subminor;
};
#define modbus_service__VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__version__descriptor) \
    , 0, 0, 0 }


struct  _modbus_service__Event
{
  ProtobufCMessage base;
  uint32_t event;
};
#define modbus_service__EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__event__descriptor) \
    , 0 }


struct  _modbus_service__RectifierOutputPresent
{
  ProtobufCMessage base;
  uint32_t voltage;
  uint32_t current;
};
#define modbus_service__RECTIFIER_OUTPUT_PRESENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__rectifier_output_present__descriptor) \
    , 0, 0 }


struct  _modbus_service__RectifierOutput
{
  ProtobufCMessage base;
  uint32_t rec_id;
  uint32_t voltage;
  uint32_t current;
};
#define modbus_service__RECTIFIER_OUTPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__rectifier_output__descriptor) \
    , 0, 0, 0 }


struct  _modbus_service__NotifyRectifierOutput
{
  ProtobufCMessage base;
  uint32_t rec_id;
};
#define modbus_service__NOTIFY_RECTIFIER_OUTPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__notify_rectifier_output__descriptor) \
    , 0 }


struct  _modbus_service__SetCommReq
{
  ProtobufCMessage base;
  uint32_t node;
  protobuf_c_boolean is_enable;
};
#define modbus_service__SET_COMM_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__set_comm_req__descriptor) \
    , 0, 0 }


struct  _modbus_service__RectifierError
{
  ProtobufCMessage base;
  protobuf_c_boolean is_error;
};
#define modbus_service__RECTIFIER_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__rectifier_error__descriptor) \
    , 0 }


struct  _modbus_service__RectifierErrorDetail
{
  ProtobufCMessage base;
  protobuf_c_boolean output_short;
  protobuf_c_boolean inner_comm_interrupt;
  protobuf_c_boolean pfc_side_abnormal;
  protobuf_c_boolean discharge_abnormal;
  protobuf_c_boolean mdl_fault;
  protobuf_c_boolean mdl_protect;
  protobuf_c_boolean over_temp;
  protobuf_c_boolean output_over_voltage;
  protobuf_c_boolean can_comm_interrupt;
  protobuf_c_boolean mdl_id_repetition;
  protobuf_c_boolean load_unsharing;
  protobuf_c_boolean input_phase_lost;
  protobuf_c_boolean input_unbalance;
  protobuf_c_boolean input_under_voltage;
  protobuf_c_boolean input_over_voltage;
  protobuf_c_boolean mdl_pfc_side_off;
};
#define modbus_service__RECTIFIER_ERROR_DETAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__rectifier_error_detail__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _modbus_service__RectifierWarning
{
  ProtobufCMessage base;
  protobuf_c_boolean fan_fault;
  protobuf_c_boolean power_limit;
};
#define modbus_service__RECTIFIER_WARNING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__rectifier_warning__descriptor) \
    , 0, 0 }


struct  _modbus_service__RectifierInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean mdl_off_state;
  protobuf_c_boolean walk_in_enable;
};
#define modbus_service__RECTIFIER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__rectifier_info__descriptor) \
    , 0, 0 }

struct  _modbus_service__OutputVoltage
{
  ProtobufCMessage base;
  uint32_t value;
};
#define modbus_service__OUTPUT_VOLTAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__output_voltage__descriptor) \
    , 0 }


struct  _modbus_service__IsoStatus
{
  ProtobufCMessage base;
  uint32_t status;
};
#define modbus_service__ISO_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__iso_status__descriptor) \
    , 0 }


struct  _modbus_service__RelayStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean main;
  protobuf_c_boolean precharge;
};
#define modbus_service__RELAY_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__relay_status__descriptor) \
    , 0, 0 }


struct  _modbus_service__BusStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean is_idle;
};
#define modbus_service__BUS_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__bus_status__descriptor) \
    , 0 }

struct  _modbus_service__HvSelfTestInfo
{
  ProtobufCMessage base;
  uint32_t self_test_info;
};
#define modbus_service__HV_SELF_TEST_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__hv_self_test_info__descriptor) \
    , 0 }

struct  _modbus_service__NodeCommLost
{
  ProtobufCMessage base;
  uint32_t node;
};
#define modbus_service__NODE_COMM_LOST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modbus_service__node_comm_lost__descriptor) \
    , 0 }

/* modbus_service__Version methods */
void   modbus_service__version__init
                     (modbus_service__Version         *message);
size_t modbus_service__version__get_packed_size
                     (const modbus_service__Version   *message);
size_t modbus_service__version__pack
                     (const modbus_service__Version   *message,
                      uint8_t             *out);
size_t modbus_service__version__pack_to_buffer
                     (const modbus_service__Version   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__Version *
       modbus_service__version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__version__free_unpacked
                     (modbus_service__Version *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__Event methods */
void   modbus_service__event__init
                     (modbus_service__Event         *message);
size_t modbus_service__event__get_packed_size
                     (const modbus_service__Event   *message);
size_t modbus_service__event__pack
                     (const modbus_service__Event   *message,
                      uint8_t             *out);
size_t modbus_service__event__pack_to_buffer
                     (const modbus_service__Event   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__Event *
       modbus_service__event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__event__free_unpacked
                     (modbus_service__Event *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__RectifierOutputPresent methods */
void   modbus_service__rectifier_output_present__init
                     (modbus_service__RectifierOutputPresent         *message);
size_t modbus_service__rectifier_output_present__get_packed_size
                     (const modbus_service__RectifierOutputPresent   *message);
size_t modbus_service__rectifier_output_present__pack
                     (const modbus_service__RectifierOutputPresent   *message,
                      uint8_t             *out);
size_t modbus_service__rectifier_output_present__pack_to_buffer
                     (const modbus_service__RectifierOutputPresent   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__RectifierOutputPresent *
       modbus_service__rectifier_output_present__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__rectifier_output_present__free_unpacked
                     (modbus_service__RectifierOutputPresent *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__RectifierOutput methods */
void   modbus_service__rectifier_output__init
                     (modbus_service__RectifierOutput         *message);
size_t modbus_service__rectifier_output__get_packed_size
                     (const modbus_service__RectifierOutput   *message);
size_t modbus_service__rectifier_output__pack
                     (const modbus_service__RectifierOutput   *message,
                      uint8_t             *out);
size_t modbus_service__rectifier_output__pack_to_buffer
                     (const modbus_service__RectifierOutput   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__RectifierOutput *
       modbus_service__rectifier_output__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__rectifier_output__free_unpacked
                     (modbus_service__RectifierOutput *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__NotifyRectifierOutput methods */
void   modbus_service__notify_rectifier_output__init
                     (modbus_service__NotifyRectifierOutput         *message);
size_t modbus_service__notify_rectifier_output__get_packed_size
                     (const modbus_service__NotifyRectifierOutput   *message);
size_t modbus_service__notify_rectifier_output__pack
                     (const modbus_service__NotifyRectifierOutput   *message,
                      uint8_t             *out);
size_t modbus_service__notify_rectifier_output__pack_to_buffer
                     (const modbus_service__NotifyRectifierOutput   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__NotifyRectifierOutput *
       modbus_service__notify_rectifier_output__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__notify_rectifier_output__free_unpacked
                     (modbus_service__NotifyRectifierOutput *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__SetCommReq methods */
void   modbus_service__set_comm_req__init
                     (modbus_service__SetCommReq         *message);
size_t modbus_service__set_comm_req__get_packed_size
                     (const modbus_service__SetCommReq   *message);
size_t modbus_service__set_comm_req__pack
                     (const modbus_service__SetCommReq   *message,
                      uint8_t             *out);
size_t modbus_service__set_comm_req__pack_to_buffer
                     (const modbus_service__SetCommReq   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__SetCommReq *
       modbus_service__set_comm_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__set_comm_req__free_unpacked
                     (modbus_service__SetCommReq *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__RectifierError methods */
void   modbus_service__rectifier_error__init
                     (modbus_service__RectifierError         *message);
size_t modbus_service__rectifier_error__get_packed_size
                     (const modbus_service__RectifierError   *message);
size_t modbus_service__rectifier_error__pack
                     (const modbus_service__RectifierError   *message,
                      uint8_t             *out);
size_t modbus_service__rectifier_error__pack_to_buffer
                     (const modbus_service__RectifierError   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__RectifierError *
       modbus_service__rectifier_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__rectifier_error__free_unpacked
                     (modbus_service__RectifierError *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__RectifierErrorDetail methods */
void   modbus_service__rectifier_error_detail__init
                     (modbus_service__RectifierErrorDetail         *message);
size_t modbus_service__rectifier_error_detail__get_packed_size
                     (const modbus_service__RectifierErrorDetail   *message);
size_t modbus_service__rectifier_error_detail__pack
                     (const modbus_service__RectifierErrorDetail   *message,
                      uint8_t             *out);
size_t modbus_service__rectifier_error_detail__pack_to_buffer
                     (const modbus_service__RectifierErrorDetail   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__RectifierErrorDetail *
       modbus_service__rectifier_error_detail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__rectifier_error_detail__free_unpacked
                     (modbus_service__RectifierErrorDetail *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__RectifierWarning methods */
void   modbus_service__rectifier_warning__init
                     (modbus_service__RectifierWarning         *message);
size_t modbus_service__rectifier_warning__get_packed_size
                     (const modbus_service__RectifierWarning   *message);
size_t modbus_service__rectifier_warning__pack
                     (const modbus_service__RectifierWarning   *message,
                      uint8_t             *out);
size_t modbus_service__rectifier_warning__pack_to_buffer
                     (const modbus_service__RectifierWarning   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__RectifierWarning *
       modbus_service__rectifier_warning__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__rectifier_warning__free_unpacked
                     (modbus_service__RectifierWarning *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__RectifierInfo methods */
void   modbus_service__rectifier_info__init
                     (modbus_service__RectifierInfo         *message);
size_t modbus_service__rectifier_info__get_packed_size
                     (const modbus_service__RectifierInfo   *message);
size_t modbus_service__rectifier_info__pack
                     (const modbus_service__RectifierInfo   *message,
                      uint8_t             *out);
size_t modbus_service__rectifier_info__pack_to_buffer
                     (const modbus_service__RectifierInfo   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__RectifierInfo *
       modbus_service__rectifier_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__rectifier_info__free_unpacked
                     (modbus_service__RectifierInfo *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__OutputVoltage methods */
void   modbus_service__output_voltage__init
                     (modbus_service__OutputVoltage         *message);
size_t modbus_service__output_voltage__get_packed_size
                     (const modbus_service__OutputVoltage   *message);
size_t modbus_service__output_voltage__pack
                     (const modbus_service__OutputVoltage   *message,
                      uint8_t             *out);
size_t modbus_service__output_voltage__pack_to_buffer
                     (const modbus_service__OutputVoltage   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__OutputVoltage *
       modbus_service__output_voltage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__output_voltage__free_unpacked
                     (modbus_service__OutputVoltage *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__IsoStatus methods */
void   modbus_service__iso_status__init
                     (modbus_service__IsoStatus         *message);
size_t modbus_service__iso_status__get_packed_size
                     (const modbus_service__IsoStatus   *message);
size_t modbus_service__iso_status__pack
                     (const modbus_service__IsoStatus   *message,
                      uint8_t             *out);
size_t modbus_service__iso_status__pack_to_buffer
                     (const modbus_service__IsoStatus   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__IsoStatus *
       modbus_service__iso_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__iso_status__free_unpacked
                     (modbus_service__IsoStatus *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__RelayStatus methods */
void   modbus_service__relay_status__init
                     (modbus_service__RelayStatus         *message);
size_t modbus_service__relay_status__get_packed_size
                     (const modbus_service__RelayStatus   *message);
size_t modbus_service__relay_status__pack
                     (const modbus_service__RelayStatus   *message,
                      uint8_t             *out);
size_t modbus_service__relay_status__pack_to_buffer
                     (const modbus_service__RelayStatus   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__RelayStatus *
       modbus_service__relay_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__relay_status__free_unpacked
                     (modbus_service__RelayStatus *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__BusStatus methods */
void   modbus_service__bus_status__init
                     (modbus_service__BusStatus         *message);
size_t modbus_service__bus_status__get_packed_size
                     (const modbus_service__BusStatus   *message);
size_t modbus_service__bus_status__pack
                     (const modbus_service__BusStatus   *message,
                      uint8_t             *out);
size_t modbus_service__bus_status__pack_to_buffer
                     (const modbus_service__BusStatus   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__BusStatus *
       modbus_service__bus_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__bus_status__free_unpacked
                     (modbus_service__BusStatus *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__HvSelfTestInfo methods */
void   modbus_service__hv_self_test_info__init
                     (modbus_service__HvSelfTestInfo         *message);
size_t modbus_service__hv_self_test_info__get_packed_size
                     (const modbus_service__HvSelfTestInfo   *message);
size_t modbus_service__hv_self_test_info__pack
                     (const modbus_service__HvSelfTestInfo   *message,
                      uint8_t             *out);
size_t modbus_service__hv_self_test_info__pack_to_buffer
                     (const modbus_service__HvSelfTestInfo   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__HvSelfTestInfo *
       modbus_service__hv_self_test_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__hv_self_test_info__free_unpacked
                     (modbus_service__HvSelfTestInfo *message,
                      ProtobufCAllocator *allocator);
/* modbus_service__NodeCommLost methods */
void   modbus_service__node_comm_lost__init
                     (modbus_service__NodeCommLost         *message);
size_t modbus_service__node_comm_lost__get_packed_size
                     (const modbus_service__NodeCommLost   *message);
size_t modbus_service__node_comm_lost__pack
                     (const modbus_service__NodeCommLost   *message,
                      uint8_t             *out);
size_t modbus_service__node_comm_lost__pack_to_buffer
                     (const modbus_service__NodeCommLost   *message,
                      ProtobufCBuffer     *buffer);
modbus_service__NodeCommLost *
       modbus_service__node_comm_lost__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modbus_service__node_comm_lost__free_unpacked
                     (modbus_service__NodeCommLost *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*modbus_service__Version_Closure)
                 (const modbus_service__Version *message,
                  void *closure_data);
typedef void (*modbus_service__Event_Closure)
                 (const modbus_service__Event *message,
                  void *closure_data);
typedef void (*modbus_service__RectifierOutputPresent_Closure)
                 (const modbus_service__RectifierOutputPresent *message,
                  void *closure_data);
typedef void (*modbus_service__RectifierOutput_Closure)
                 (const modbus_service__RectifierOutput *message,
                  void *closure_data);
typedef void (*modbus_service__NotifyRectifierOutput_Closure)
                 (const modbus_service__NotifyRectifierOutput *message,
                  void *closure_data);
typedef void (*modbus_service__SetCommReq_Closure)
                 (const modbus_service__SetCommReq *message,
                  void *closure_data);
typedef void (*modbus_service__RectifierError_Closure)
                 (const modbus_service__RectifierError *message,
                  void *closure_data);
typedef void (*modbus_service__RectifierErrorDetail_Closure)
                 (const modbus_service__RectifierErrorDetail *message,
                  void *closure_data);
typedef void (*modbus_service__RectifierWarning_Closure)
                 (const modbus_service__RectifierWarning *message,
                  void *closure_data);
typedef void (*modbus_service__RectifierInfo_Closure)
                 (const modbus_service__RectifierInfo *message,
                  void *closure_data);
typedef void (*modbus_service__OutputVoltage_Closure)
                 (const modbus_service__OutputVoltage *message,
                  void *closure_data);
typedef void (*modbus_service__IsoStatus_Closure)
                 (const modbus_service__IsoStatus *message,
                  void *closure_data);
typedef void (*modbus_service__RelayStatus_Closure)
                 (const modbus_service__RelayStatus *message,
                  void *closure_data);
typedef void (*modbus_service__BusStatus_Closure)
                 (const modbus_service__BusStatus *message,
                  void *closure_data);
typedef void (*modbus_service__HvSelfTestInfo_Closure)
                 (const modbus_service__HvSelfTestInfo *message,
                  void *closure_data);
typedef void (*modbus_service__NodeCommLost_Closure)
                 (const modbus_service__NodeCommLost *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor modbus_service__version__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__event__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__rectifier_output_present__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__rectifier_output__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__notify_rectifier_output__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__set_comm_req__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__rectifier_error__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__rectifier_error_detail__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__rectifier_warning__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__rectifier_info__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__output_voltage__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__iso_status__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__relay_status__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__bus_status__descriptor;
extern const ProtobufCMessageDescriptor modbus_service__hv_self_test_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_modbus_service_2eproto__INCLUDED */
